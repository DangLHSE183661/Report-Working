using System;
using System.Collections.Generic;

class TreeNode<T> //Node
{
    public T Value;
    public List<TreeNode<T>> Children;
    public TreeNode(T value){
        Value=value;
        Children = new List<TreeNode<T>>();
    }
    public void AddChildren(TreeNode<T> child){
        Children.Add(child);
    }
}

class Tree<T>
{
    public TreeNode<T> Root;
    public Tree(T rootValue){                                           
        Root = new TreeNode<T>(rootValue);
    }
    
    public void DepthFirstTraversal(TreeNode<T> node, Action<T> action)
    {
        if(node==null) return;
        action(node.Value);
        foreach(var child in node.Children){
            DepthFirstTraversal(child,action);
        }
    }

     
    public void BreadthFirstTraversal(TreeNode<T> node, Action<T> action)
    {
        if(node==null) return;
        Queue<TreeNode<T>> queue = new Queue<TreeNode<T>>();
        queue.Enqueue(node);
        while(queue.Count>0){
            var current = queue.Dequeue();
            action(current.Value);
            foreach(var child in current.Children){
                queue.Enqueue(child);
            }
        }
    }   
}

class HelloWorld
{
    static void Main()
    {
       Tree<int> tree = new Tree<int>(1);
       //add node for root
       TreeNode<int> child1 = new TreeNode<int>(2);
       TreeNode<int> child2 = new TreeNode<int>(3);
       tree.Root.AddChildren(child1);
       tree.Root.AddChildren(child2);
       //add node for child
       child1.AddChildren(new TreeNode<int>(4));
       child1.AddChildren(new TreeNode<int>(5));
    
       child2.AddChildren(new TreeNode<int>(6));
       child2.AddChildren(new TreeNode<int>(7));
       
       Console.WriteLine("DFS: ");
       tree.DepthFirstTraversal(tree.Root,value=>Console.WriteLine(value));
       Console.WriteLine("\nBFS: ");
       tree.BreadthFirstTraversal(tree.Root,value=>Console.WriteLine(value));
    }
}
